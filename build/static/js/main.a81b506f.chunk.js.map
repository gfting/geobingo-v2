{"version":3,"sources":["utils.js","components/Link.js","constants.js","components/LinkList.js","components/CreateLink.js","components/Header.js","components/Login.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","authToken","localStorage","getItem","className","this","props","index","mutation","variables","linkId","link","id","update","store","vote","data","updateStoreAfterVote","voteMutation","onClick","description","url","votes","length","postedBy","name","createdAt","Component","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","LinkList","_updateCacheAfterVote","createVote","isNewPage","location","pathname","includes","page","parseInt","match","params","skip","first","orderBy","readQuery","query","feed","links","find","writeQuery","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","Object","assign","count","__typename","_subscribeToNewVotes","_getQueryVariables","_getLinksToRender","rankedLinks","slice","sort","l1","l2","_nextPage","nextPage","history","push","_previousPage","previousPage","loading","error","linksToRender","pageIndex","map","key","POST_MUTATION","CreateLink","state","value","onChange","e","setState","target","type","placeholder","onCompleted","post","unshift","postMutation","Header","to","removeItem","withRouter","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","_confirm","a","signup","token","_saveUserData","setItem","FEED_SEARCH_QUERY","Search","filter","_executeSearch","client","result","withApollo","App","exact","path","render","component","Boolean","window","hostname","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","split","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a81b506f.chunk.js","sourcesContent":["function timeDifference(current, previous) {\n  const milliSecondsPerMinute = 60 * 1000\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\n  const milliSecondsPerDay = milliSecondsPerHour * 24\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\n  const milliSecondsPerYear = milliSecondsPerDay * 365\n\n  const elapsed = current - previous\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return 'just now'\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return 'less than 1 min ago'\n  } else if (elapsed < milliSecondsPerHour) {\n    return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n  } else if (elapsed < milliSecondsPerDay) {\n    return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n  } else if (elapsed < milliSecondsPerMonth) {\n    return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n  } else if (elapsed < milliSecondsPerYear) {\n    return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n  } else {\n    return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n  }\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime()\n  const updated = new Date(date).getTime()\n  return timeDifference(now, updated)\n}\n","import React, { Component } from 'react'\nimport { AUTH_TOKEN } from '../constants'\nimport { timeDifferenceForDate } from '../utils'\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nconst VOTE_MUTATION = gql`\n  mutation VoteMutation($linkId: ID!) {\n    vote(linkId: $linkId) {\n      id\n      link {\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`\n\nclass Link extends Component {\n  render() {\n    const authToken = localStorage.getItem(AUTH_TOKEN)\n\n    return (\n      <div className=\"flex mt2 items-start\">\n        <div className=\"flex items-center\">\n          <span className=\"gray\">{this.props.index + 1}.</span>\n          {authToken && (\n            <Mutation\n              mutation={VOTE_MUTATION}\n              variables={{ linkId: this.props.link.id }}\n              update={(store, { data: { vote } }) =>\n                this.props.updateStoreAfterVote(store, vote, this.props.link.id)\n              }\n            >\n              {voteMutation => (\n                <div className=\"ml1 gray f11\" onClick={voteMutation}>\n                  ▲\n                </div>\n              )}\n            </Mutation>\n          )}\n        </div>\n        <div className=\"ml1\">\n          <div>\n            {this.props.link.description} ({this.props.link.url})\n          </div>\n          <div className=\"f6 lh-copy gray\">\n            {this.props.link.votes.length} votes | by{' '}\n            {this.props.link.postedBy\n              ? this.props.link.postedBy.name\n              : 'Unknown'}{' '}\n            {timeDifferenceForDate(this.props.link.createdAt)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Link","export const AUTH_TOKEN = 'auth-token'\nexport const LINKS_PER_PAGE = 5\n","import React, { Component, Fragment } from 'react'\nimport Link from './Link'\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { LINKS_PER_PAGE } from '../constants'\n\nexport const FEED_QUERY = gql`\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`\n\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`\n\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`\n\nclass LinkList extends Component {\n  _updateCacheAfterVote = (store, createVote, linkId) => {\n    const isNewPage = this.props.location.pathname.includes('new')\n    const page = parseInt(this.props.match.params.page, 10)\n\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n    const first = isNewPage ? LINKS_PER_PAGE : 100\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\n    const data = store.readQuery({\n      query: FEED_QUERY,\n      variables: { first, skip, orderBy },\n    })\n\n    const votedLink = data.feed.links.find(link => link.id === linkId)\n    votedLink.votes = createVote.link.votes\n    store.writeQuery({ query: FEED_QUERY, data })\n  }\n\n  _subscribeToNewLinks = subscribeToMore => {\n    subscribeToMore({\n      document: NEW_LINKS_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n        const newLink = subscriptionData.data.newLink\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id)\n        if (exists) return prev\n\n        return Object.assign({}, prev, {\n          feed: {\n            links: [newLink, ...prev.feed.links],\n            count: prev.feed.links.length + 1,\n            __typename: prev.feed.__typename,\n          },\n        })\n      },\n    })\n  }\n\n  _subscribeToNewVotes = subscribeToMore => {\n    subscribeToMore({\n      document: NEW_VOTES_SUBSCRIPTION,\n    })\n  }\n  _getQueryVariables = () => {\n    const isNewPage = this.props.location.pathname.includes('new')\n    const page = parseInt(this.props.match.params.page, 10)\n\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n    const first = isNewPage ? LINKS_PER_PAGE : 100\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\n    return { first, skip, orderBy }\n  }\n\n  _getLinksToRender = data => {\n    const isNewPage = this.props.location.pathname.includes('new')\n    if (isNewPage) {\n      return data.feed.links\n    }\n    const rankedLinks = data.feed.links.slice()\n    rankedLinks.sort((l1, l2) => l2.votes.length - l1.votes.length)\n    return rankedLinks\n  }\n  _nextPage = data => {\n    const page = parseInt(this.props.match.params.page, 10)\n    if (page <= data.feed.count / LINKS_PER_PAGE) {\n      const nextPage = page + 1\n      this.props.history.push(`/new/${nextPage}`)\n    }\n  }\n\n  _previousPage = () => {\n    const page = parseInt(this.props.match.params.page, 10)\n    if (page > 1) {\n      const previousPage = page - 1\n      this.props.history.push(`/new/${previousPage}`)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={FEED_QUERY} variables={this._getQueryVariables()}>\n        {({ loading, error, data, subscribeToMore }) => {\n          if (loading) return <div>Fetching</div>\n          if (error) return <div>Error</div>\n\n          this._subscribeToNewLinks(subscribeToMore)\n          this._subscribeToNewVotes(subscribeToMore)\n\n          const linksToRender = this._getLinksToRender(data)\n          const isNewPage = this.props.location.pathname.includes('new')\n          const pageIndex = this.props.match.params.page\n            ? (this.props.match.params.page - 1) * LINKS_PER_PAGE\n            : 0\n\n          return (\n            <Fragment>\n              {linksToRender.map((link, index) => (\n                <Link\n                  key={link.id}\n                  link={link}\n                  index={index + pageIndex}\n                  updateStoreAfterVote={this._updateCacheAfterVote}\n                />\n              ))}\n              {isNewPage && (\n                <div className=\"flex ml4 mv3 gray\">\n                  <div className=\"pointer mr2\" onClick={this._previousPage}>\n                    Previous\n                  </div>\n                  <div className=\"pointer\" onClick={() => this._nextPage(data)}>\n                    Next\n                  </div>\n                </div>\n              )}\n            </Fragment>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default LinkList\n","import React, { Component } from 'react'\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { FEED_QUERY } from './LinkList'\nimport { LINKS_PER_PAGE } from '../constants'\n\nconst POST_MUTATION = gql`\n  mutation PostMutation($description: String!, $url: String!) {\n    post(description: $description, url: $url) {\n      id\n      createdAt\n      url\n      description\n    }\n  }\n`\n\nclass CreateLink extends Component {\n  state = {\n    description: '',\n    url: '',\n  }\n\n  render() {\n    const { description, url } = this.state\n    return (\n      <div>\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={description}\n            onChange={e => this.setState({ description: e.target.value })}\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={url}\n            onChange={e => this.setState({ url: e.target.value })}\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <Mutation\n          mutation={POST_MUTATION}\n          variables={{ description, url }}\n          onCompleted={() => this.props.history.push('/new/1')}\n          update={(store, { data: { post } }) => {\n            const first = LINKS_PER_PAGE\n            const skip = 0\n            const orderBy = 'createdAt_DESC'\n            const data = store.readQuery({\n              query: FEED_QUERY,\n              variables: { first, skip, orderBy },\n            })\n            data.feed.links.unshift(post)\n            store.writeQuery({\n              query: FEED_QUERY,\n              data,\n              variables: { first, skip, orderBy },\n            })\n          }}\n        >\n          {postMutation => <button onClick={postMutation}>Submit</button>}\n        </Mutation>\n      </div>\n    )\n  }\n}\n\nexport default CreateLink\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport { AUTH_TOKEN } from '../constants'\n\nclass Header extends Component {\n  render() {\n    const authToken = localStorage.getItem(AUTH_TOKEN)\n    return (\n      <div className=\"flex pa1 justify-between nowrap orange\">\n        <div className=\"flex flex-fixed black\">\n          <div className=\"fw7 mr1\">Hacker News</div>\n          <Link to=\"/\" className=\"ml1 no-underline black\">\n            new\n          </Link>\n          <div className=\"ml1\">|</div>\n          <Link to=\"/top\" className=\"ml1 no-underline black\">\n            top\n          </Link>\n          <div className=\"ml1\">|</div>\n          <Link to=\"/search\" className=\"ml1 no-underline black\">\n            search\n          </Link>\n          {authToken && (\n            <div className=\"flex\">\n              <div className=\"ml1\">|</div>\n              <Link to=\"/create\" className=\"ml1 no-underline black\">\n                submit\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-fixed\">\n          {authToken ? (\n            <div\n              className=\"ml1 pointer black\"\n              onClick={() => {\n                localStorage.removeItem(AUTH_TOKEN)\n                this.props.history.push(`/`)\n              }}\n            >\n              logout\n            </div>\n          ) : (\n              <Link to=\"/login\" className=\"ml1 no-underline black\">\n                login\n            </Link>\n            )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)","import React, { Component } from 'react'\nimport { AUTH_TOKEN } from '../constants'\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\n    signup(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n`\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`\n\nclass Login extends Component {\n  state = {\n    login: true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    name: '',\n  }\n\n  render() {\n    const { login, email, password, name } = this.state\n    return (\n      <div>\n        <h4 className=\"mv3\">{login ? 'Login' : 'Sign Up'}</h4>\n        <div className=\"flex flex-column\">\n          {!login && (\n            <input\n              value={name}\n              onChange={e => this.setState({ name: e.target.value })}\n              type=\"text\"\n              placeholder=\"Your name\"\n            />\n          )}\n          <input\n            value={email}\n            onChange={e => this.setState({ email: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your email address\"\n          />\n          <input\n            value={password}\n            onChange={e => this.setState({ password: e.target.value })}\n            type=\"password\"\n            placeholder=\"Choose a safe password\"\n          />\n        </div>\n        <div className=\"flex mt3\">\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, name }}\n            onCompleted={data => this._confirm(data)}\n          >\n            {mutation => (\n              <div className=\"pointer mr2 button\" onClick={mutation}>\n                {login ? 'login' : 'create account'}\n              </div>\n            )}\n          </Mutation>\n          <div\n            className=\"pointer button\"\n            onClick={() => this.setState({ login: !login })}\n          >\n            {login ? 'need to create an account?' : 'already have an account?'}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  _confirm = async data => {\n    const { token } = this.state.login ? data.login : data.signup\n    this._saveUserData(token)\n    this.props.history.push(`/`)\n  }\n\n  _saveUserData = token => {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport { withApollo } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport Link from './Link'\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`\n\nclass Search extends Component {\n  state = {\n    links: [],\n    filter: '',\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          Search\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ filter: e.target.value })}\n          />\n          <button onClick={() => this._executeSearch()}>OK</button>\n        </div>\n        {this.state.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n      </div>\n    )\n  }\n\n  _executeSearch = async () => {\n    const { filter } = this.state\n    const result = await this.props.client.query({\n      query: FEED_SEARCH_QUERY,\n      variables: { filter },\n    })\n    const links = result.data.feed.links\n    this.setState({ links })\n  }\n}\n\nexport default withApollo(Search)\n","import React, { Component } from 'react'\nimport LinkList from './LinkList'\nimport CreateLink from './CreateLink'\nimport Header from './Header'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport Login from './Login'\nimport Search from './Search'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"center w85\">\n        <Header />\n        <div className=\"ph3 pv1 background-gray\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/new/1\" />} />\n            <Route exact path=\"/create\" component={CreateLink} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/search\" component={Search} />\n            <Route exact path=\"/top\" component={LinkList} />\n            <Route exact path=\"/new/:page\" component={LinkList} />\n          </Switch>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { BrowserRouter } from 'react-router-dom'\nimport { setContext } from 'apollo-link-context'\nimport { AUTH_TOKEN } from './constants'\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000',\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    },\n  },\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}